/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import { LayerMaterial, Depth, Fresnel, Noise, Color } from "lamina/vanilla";
import React, { useMemo, useRef, useState } from "react";
import { useThree } from "@react-three/fiber";
import { useGLTF, Float } from "@react-three/drei";

const colorA = new THREE.Color("#808080").convertSRGBToLinear();
const colorB = new THREE.Color("#0F1C4D").convertSRGBToLinear();
const fresnel = new THREE.Color("#C0C0C0").convertSRGBToLinear();
const material = new LayerMaterial({
  layers: [
    new Color({ color: colorA }),
    // new Base({ color: colorA }),
    new Depth({
      colorA: colorA,
      colorB: colorB,
      alpha: 0.5,
      mode: "normal",
      near: 0,
      far: 2,
      origin: [1, 1, 1],
    }),
    new Depth({
      colorA: "purple",
      colorB: colorB,
      alpha: 0.5,
      mode: "add",
      near: 3,
      far: 2,
      origin: [1, 1, 1],
    }),
    new Fresnel({
      mode: "add",
      color: fresnel,
      intensity: 0.3,
      power: 2.5,
      bias: 0.0,
    }),
    new Noise({
      mapping: "local",
      type: "simplex",
      scale: 1000,
      colorA: "#ffaf40",
      colorB: "black",
      mode: "overlay",
    }),
  ],
});

// const material = (
//   <LayerMaterial
//     color={colorA} //
//     lighting="physical"
//     transmission={1}
//   >
//     <Depth
//       colorA={colorA}
//       colorB={colorB}
//       alpha={0.5}
//       mode="add"
//       near={0}
//       far={2}
//       origin={[1, 1, 1]}
//     />
//     <Depth
//       colorA="purple"
//       colorB={colorB}
//       alpha={0.5}
//       mode="normal"
//       near={3}
//       far={2}
//       origin={[1, 1, 1]}
//     />
//     <Fresnel
//       mode="add"
//       color={fresnel}
//       intensity={0.3}
//       power={2.5}
//       bias={0.0}
//     />
//     <Noise
//       mapping="local"
//       type="simplex"
//       scale={1000}
//       colorA="#ffaf40"
//       colorB="black"
//       mode="overlay"
//     />
//   </LayerMaterial>
// );

function ModelBase({ ...props }) {
  const { viewport, camera } = useThree();
  const group = useRef();
  const { nodes, materials } = useGLTF("/NF02.glb");
  console.log(materials);
  nodes["N16-ST-002"].scale.x = 0.5;
  nodes["N16-ST-002"].scale.y = 0.5;
  nodes["N16-ST-002"].scale.z = 0.5;
  const [speed] = useState(() => 0.1 + Math.random() / 10);
  const position = useMemo(() => {
    const z = Math.random() * -20;
    const bounds = viewport.getCurrentViewport(camera, [0, 0, z]);
    return [
      THREE.MathUtils.randFloatSpread(bounds.width),
      THREE.MathUtils.randFloatSpread(bounds.height * 0.75),
      z,
    ];
  }, [viewport]);
  return (
    <Float
      position={position}
      speed={speed}
      rotationIntensity={10}
      floatIntensity={40}
      dispose={null}
    >
      <group ref={group} {...props} dispose={null}>
        <mesh geometry={nodes["N16-ST-002"].geometry} material={material} />
      </group>
    </Float>
  );
}

export default function Model() {
  return Array.from({ length: 8 }, (_, i) => <ModelBase key={i} />);
}

useGLTF.preload("/NF02.glb");
